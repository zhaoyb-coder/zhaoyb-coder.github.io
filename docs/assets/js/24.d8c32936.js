(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{505:function(a,t,_){"use strict";_.r(t);var v=_(30),r=Object(v.a)({},(function(){var a=this,t=a.$createElement,_=a._self._c||t;return _("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[_("h1",{attrs:{id:"jvm概述"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#jvm概述"}},[a._v("#")]),a._v(" JVM概述")]),a._v(" "),_("h3",{attrs:{id:"_1、jvm运行时区"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1、jvm运行时区"}},[a._v("#")]),a._v(" 1、JVM运行时区")]),a._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/zhaoyb-coder/pic-repo/main/image-20231225135517480.png",alt:"image-20231225135517480"}})]),a._v(" "),_("h4",{attrs:{id:"_1-1、程序计数器"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-1、程序计数器"}},[a._v("#")]),a._v(" 1.1、程序计数器")]),a._v(" "),_("p",[a._v("程序计数器就是当前线程执行的行数指示器")]),a._v(" "),_("h4",{attrs:{id:"_1-2、虚拟机栈-本地方法栈"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-2、虚拟机栈-本地方法栈"}},[a._v("#")]),a._v(" 1.2、虚拟机栈/本地方法栈")]),a._v(" "),_("p",[a._v("Hot-Spot 虚拟机把虚拟机栈和本地方法栈合二为一，内部主要存储局部变量表、操作数栈、动态连接、方法出口等信息")]),a._v(" "),_("p",[a._v("每一个方法从调用到执行完毕的过程，就是一个栈帧在虚拟机栈中从入栈到出栈的过程")]),a._v(" "),_("h4",{attrs:{id:"_1-4、堆"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-4、堆"}},[a._v("#")]),a._v(" 1.4、堆")]),a._v(" "),_("h4",{attrs:{id:"_1-5、方法区"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-5、方法区"}},[a._v("#")]),a._v(" 1.5、方法区")]),a._v(" "),_("p",[a._v("存储的是被虚拟机加载的类型信息、常量、静态变量、即时编译后代码缓存等数据")]),a._v(" "),_("h4",{attrs:{id:"_1-6、直接内存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_1-6、直接内存"}},[a._v("#")]),a._v(" 1.6、直接内存")]),a._v(" "),_("p",[a._v("直接内存代表着不是JVM内存的一部分，属于操作系统内存，但是也可以被JVM使用，比如引入NIO之后可以使用Native函数库直接分配堆外内存，然后存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作。这样的场景可以提交效率，避免在Java堆和Native堆进行来回复制数据。")]),a._v(" "),_("p",[a._v("直接内存的大小可以根据-XX：MaxDirectMemorySize来设置，如果不进行设置，则大小与堆的最大值-Xmx一致。")]),a._v(" "),_("h3",{attrs:{id:"_2、java对象"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2、java对象"}},[a._v("#")]),a._v(" 2、Java对象")]),a._v(" "),_("h4",{attrs:{id:"_2-1、如何分配对象内存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-1、如何分配对象内存"}},[a._v("#")]),a._v(" 2.1、如何分配对象内存")]),a._v(" "),_("ul",[_("li",[_("strong",[a._v("指针碰撞")]),a._v("\n如果堆中的内存是完全规整的，所有未被使用的内存都被放在一起，那么分配一个对象内存只需要把指针向空闲的内存方向移动一定的距离就可以了。")]),a._v(" "),_("li",[_("strong",[a._v("空闲列表")]),a._v("\n如果堆中的内存并不规整，已使用内存和空闲内存交叉在一起，那么JVM需要维护一个空闲内存的列表，在分配内存的时候从列表中取出足够大的空间划分为实例对象。")])]),a._v(" "),_("p",[a._v("具体使用哪种方式进行内存分配，需要根据内存是否规整来决定；内存是否规整，取决于JVM使用哪种垃圾收集器；当使用的是Serial、ParNew等带有压缩整理的收集器时，系统采用的是指针碰撞来分配内存；当使用CMS来当做垃圾收集器时，理论上只能使用空闲列表来分配内存")]),a._v(" "),_("p",[a._v("除了划分可用内存之外，还有一个需要考虑的问题，就是并发问题。如果对A分配内存的时候，这块内存同时被B使用了，这种问题有两种解决方案：")]),a._v(" "),_("p",[a._v("一种是进行同步处理，虚拟机使用CAS的失败重试进行内存分配，来保证更新内存的原子性")]),a._v(" "),_("p",[a._v("一种是每个线程在JVM堆中预先分配一小块内存（"),_("strong",[a._v("本地线程分配缓冲区Thread Local Allocation Buffer TLAB")]),a._v("），线程先在TLAB中分配内存，如果内存分配完了，后续在需要进行同步分配；")]),a._v(" "),_("p",[a._v("虚拟机是否使用TLAB，使用参数控制 -XX: +/-UseTLAB")]),a._v(" "),_("h4",{attrs:{id:"_2-2、对象的组成"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-2、对象的组成"}},[a._v("#")]),a._v(" 2.2、对象的组成")]),a._v(" "),_("p",[a._v("对象在堆内的存储布局分为三个部分："),_("strong",[a._v("对象头(Header)、实例数据(Instance)和对齐填充(Padding)")])]),a._v(" "),_("h5",{attrs:{id:"_2-3-1、对象头"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-1、对象头"}},[a._v("#")]),a._v(" 2.3.1、对象头")]),a._v(" "),_("p",[a._v("对象头分为两类信息")]),a._v(" "),_("p",[a._v("1、存储对象自身的运行时数据 （Mark Word）")]),a._v(" "),_("ul",[_("li",[a._v("哈希码(HashCode)")]),a._v(" "),_("li",[a._v("GC分代年龄")]),a._v(" "),_("li",[a._v("锁状态标志")]),a._v(" "),_("li",[a._v("线程持有的锁")]),a._v(" "),_("li",[a._v("偏向线程ID")]),a._v(" "),_("li",[a._v("偏向时间戳")]),a._v(" "),_("li",[a._v("等")])]),a._v(" "),_("p",[a._v("2、类型指针")]),a._v(" "),_("p",[a._v("JVM通过这个指针来确定该对象是哪一个类的实例")]),a._v(" "),_("p",[a._v("此外，如果对象是一个数组，那么对象头还必须要存储数组长度。")]),a._v(" "),_("h5",{attrs:{id:"_2-3-2、对齐填充"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-2、对齐填充"}},[a._v("#")]),a._v(" 2.3.2、对齐填充")]),a._v(" "),_("p",[a._v("并不是必须的，仅仅是占位符的作用。因为HotSpot 虚拟机要求对象的起始地址必须是8字节的整数倍，也就是对象的大小必须是8字节的整数倍。对象头已经被精心设计为了8字节的整数倍（1或者2），以为如果实例对象的大小不满足8字节的整数倍，那么缺少的部分将由对齐填充来补全")]),a._v(" "),_("h4",{attrs:{id:"_2-3、对象的访问"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-3、对象的访问"}},[a._v("#")]),a._v(" 2.3、对象的访问")]),a._v(" "),_("p",[a._v("Java程序使用对象的方式是在栈上的reference数据来操作对堆中的具体对象。如何定位到堆中的实例化对象，一般有两种方法作为实现：句柄和指针 （HotSpot主要使用指针）")]),a._v(" "),_("p",[a._v("1、如果使用句柄的话，在java堆中需要单独划分一块内存作为句柄池，reference中存储的对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自具体的地址信息；")]),a._v(" "),_("p",[_("code",[a._v("使用句柄的好处就是reference中存储的是稳定的句柄地址，在对象移动时（GC移动对象）改变的只是句柄中的实例数据指针，而reference本身不需要更改")])]),a._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/zhaoyb-coder/pic-repo/main/image-20231225153029023.png",alt:"image-20231225153029023"}})]),a._v(" "),_("p",[a._v("2、使用指针直接访问对象，reference存储的直接就是对象地址")]),a._v(" "),_("p",[_("code",[a._v("使用指针的好处就是能直接访问对象，少了一次中间的开销")])]),a._v(" "),_("p",[_("img",{attrs:{src:"https://raw.githubusercontent.com/zhaoyb-coder/pic-repo/main/image-20231225153400409.png",alt:"image-20231225153400409"}})]),a._v(" "),_("h3",{attrs:{id:"_3、垃圾收集"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3、垃圾收集"}},[a._v("#")]),a._v(" 3、垃圾收集")]),a._v(" "),_("blockquote",[_("p",[a._v("Java 与 C++之间有一堵由内存动态分配和垃圾收集技术所围成的高墙，墙外面的人想 进去，墙里面的人却想出来")])])])}),[],!1,null,null,null);t.default=r.exports}}]);