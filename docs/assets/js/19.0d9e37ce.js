(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{331:function(t,e,a){"use strict";a.r(e);var r=a(8),o=Object(r.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"linux-i-o模型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#linux-i-o模型"}},[t._v("#")]),t._v(" Linux-I/O模型")]),t._v(" "),e("blockquote",[e("p",[t._v("Linux的内核将所有外部设备都看做一个文件来操作，对一个文件的读写操作会调用内核提供的系统命令，返回一个file descriptor（fd，文件描述符）。而对一个socket的读写也会有相应的描述符，称为socketfd（socket描述符），描述符就是一个数字，它指向内核中的一个结构体（文件路径，数据区等一些属性）")])]),t._v(" "),e("h2",{attrs:{id:"_1、阻塞i-o"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、阻塞i-o"}},[t._v("#")]),t._v(" 1、阻塞I/O")]),t._v(" "),e("blockquote",[e("p",[t._v("阻塞的文件描述符称之为阻塞I/O")])]),t._v(" "),e("p",[t._v("对于阻塞IO的系统调用可能因为无法立即完成而被操作系统挂起，直到等待的事件发生为止")]),t._v(" "),e("p",[t._v("比如客户端通过connect向服务器发起连接时，connect首先发送同步报文给服务器，然后等待服务器的返回确认报文段，如果服务器没有立即返回报文段，则connect调用将会被挂起，直到客户端收到确认报文段并唤醒connect调用")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/zhaoyb-coder/pic-repo/main/image-20240305160216703.png",alt:"image-20240305160216703"}})]),t._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/zhaoyb-coder/pic-repo/main/image-20240305160253699.png",alt:"image-20240305160253699"}})]),t._v(" "),e("h2",{attrs:{id:"_2、非阻塞i-o"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、非阻塞i-o"}},[t._v("#")]),t._v(" 2、非阻塞I/O")]),t._v(" "),e("blockquote",[e("p",[t._v("非阻塞的文件描述符称之为非阻塞I/O")])]),t._v(" "),e("p",[t._v("对于非阻塞IO的调用总是立即返回，而不管事件是否发生。")]),t._v(" "),e("p",[t._v("如果事件没有发生，就返回-1（和出错的情况一样），这时必须根据errno来区分这两种情况。")]),t._v(" "),e("p",[t._v("对于accept、send、recv来说，事件未发生时errno通常被设置为EAGAIN（再来一次）或者EWOULDBLOCK（期望阻塞）；对于connect来说，errno被设置为EINPROGRESS（处理中）")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/zhaoyb-coder/pic-repo/main/image-20240305160323549.png",alt:"image-20240305160323549"}})]),t._v(" "),e("p",[e("strong",[t._v("只有在事件已经发生时操作非阻塞I/O才能提高程序的效率，所以非阻塞I/O通常和其它I/O通知机制一起使用（比如I/O复用和SIGIO信号）")])]),t._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/zhaoyb-coder/pic-repo/main/image-20240305160410111.png",alt:"image-20240305160410111"}})]),t._v(" "),e("hr"),t._v(" "),e("p",[e("strong",[t._v("总结：")])]),t._v(" "),e("p",[t._v("同步I/O模型要求用户代码自行执行I/O操作（将数据从内核缓冲区读入用户缓冲区 或者 将数据从用户缓冲区写入内核缓冲区）")]),t._v(" "),e("p",[t._v("异步I/O模型则由内核来执行I/O操作（数据从内核缓冲区到用户缓冲区之间的移动是内核在“后台”完成的）")]),t._v(" "),e("p",[t._v("同步I/O向应用程序通知的是I/O就绪事件")]),t._v(" "),e("p",[t._v("异步I/O向应用程序通知的是I/O完成事件")]),t._v(" "),e("h2",{attrs:{id:"_3、i-o复用模型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、i-o复用模型"}},[t._v("#")]),t._v(" 3、I/O复用模型")]),t._v(" "),e("p",[t._v("Linux提供select/poll，进程通过将一个或多个fd传递给select或poll系统调用，阻塞在select操作上，这样select/poll可以帮我们侦测多个fd是否处于就绪状态。select/poll是顺序扫描fd是否就绪，而且支持的fd数量有限，因此它的使用受到了一些制约。Linux还提供了一个epoll系统调用，epoll使用基于事件驱动方式代替顺序扫描，因此性能更高。当有fd就绪时，立即回调函数rollback")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/zhaoyb-coder/pic-repo/main/image-20240429153805231.png",alt:"image-20240429153805231"}})]),t._v(" "),e("h2",{attrs:{id:"_4、信号驱动i-o模型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4、信号驱动i-o模型"}},[t._v("#")]),t._v(" 4、信号驱动I/O模型")]),t._v(" "),e("p",[t._v("首先开启套接口信号驱动I/O功能，并通过系统调用sigaction执行一个信号处理函数（此系统调用立即返回，进程继续工作，它是非阻塞的）。当数据准备就绪时，就为该进程生成一个SIGIO信号，通过信号回调通知应用程序调用recvfrom来读取数据，并通知主循环函数处理数据")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/zhaoyb-coder/pic-repo/main/image-20240429154902361.png",alt:"image-20240429154902361"}})]),t._v(" "),e("h2",{attrs:{id:"_5、异步i-o"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5、异步i-o"}},[t._v("#")]),t._v(" 5、异步I/O")]),t._v(" "),e("p",[t._v("告知内核启动某个操作，并让内核在整个操作完成后（包括将数据从内核复制到用户自己的缓冲区）通知我们。")]),t._v(" "),e("p",[t._v("这种模型与信号驱动模型的主要区别是：信号驱动I/O由内核通知我们何时可以开始一个I/O操作；异步I/O模型由内核通知我们I/O操作何时已经完成")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://raw.githubusercontent.com/zhaoyb-coder/pic-repo/main/image-20240429162053243.png",alt:"image-20240429162053243"}})])])}),[],!1,null,null,null);e.default=o.exports}}]);