(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{342:function(t,r,e){"use strict";e.r(r);var a=e(8),s=Object(a.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"聊聊docker"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#聊聊docker"}},[t._v("#")]),t._v(" 聊聊docker")]),t._v(" "),r("h2",{attrs:{id:"_1-初识-docker"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-初识-docker"}},[t._v("#")]),t._v(" "),r("strong",[t._v("1.")]),t._v(" "),r("strong",[t._v("初识")]),t._v(" "),r("strong",[t._v("docker")])]),t._v(" "),r("h3",{attrs:{id:"_1-1-什么是-docker"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-什么是-docker"}},[t._v("#")]),t._v(" "),r("strong",[t._v("1.1")]),t._v(" "),r("strong",[t._v("什么是")]),t._v(" "),r("strong",[t._v("Docker")]),t._v("？")]),t._v(" "),r("ul",[r("li",[t._v("Docker 是基于 Go 语言实现的开源容器项目，诞生于 2013 年年初，最初发起者是 dotCloud")])]),t._v(" "),r("p",[t._v("公司.")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("Docker 是 Linux 平台上的一款轻量级虚拟化容器的管理引擎.")])]),t._v(" "),r("li",[r("p",[t._v("Docker 利用 Linux 内核特性命名空间(namespaces)及控制组(cgroups)等为容器提供隔离的")])])]),t._v(" "),r("p",[t._v("运行环境.")]),t._v(" "),r("ul",[r("li",[t._v("Docker 官方如此描述 Docker：“Build，Ship，Run.An open platform for distributed applications")])]),t._v(" "),r("p",[t._v("for developers and sysadmins”. 换言之，Docker 为"),r("strong",[t._v("开发者与系统管理者")]),t._v("提供了分布式应用的")]),t._v(" "),r("p",[t._v("开放平台，从而可以便捷地构建、迁移与运行分布式应用 .")]),t._v(" "),r("ul",[r("li",[t._v("现在官网上介绍它的要做的事情是“"),r("strong",[t._v("Build-Share-Run")]),t._v("”，也是通过对应用的封装、分发、")])]),t._v(" "),r("p",[t._v("部署、运行生命周期进行管理，达到应用组件“"),r("strong",[t._v("一次封装，到处运行")]),t._v("”的目的.")]),t._v(" "),r("h3",{attrs:{id:"_1-2-为什么要使用-docker"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-为什么要使用-docker"}},[t._v("#")]),t._v(" "),r("strong",[t._v("1.2")]),t._v(" "),r("strong",[t._v("为什么要使用")]),t._v(" "),r("strong",[t._v("Docker")]),t._v("？")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/zhaoyb-coder/pic-repo/main/image-20241017094447494.png",alt:"image-20241017094447494"}})]),t._v(" "),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/zhaoyb-coder/pic-repo/main/image-20241017094505939.png",alt:"image-20241017094505939"}})]),t._v(" "),r("h2",{attrs:{id:"_2-核心概念与安装配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-核心概念与安装配置"}},[t._v("#")]),t._v(" 2. 核心概念与安装配置")]),t._v(" "),r("h3",{attrs:{id:"_2-1-核心概念"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-核心概念"}},[t._v("#")]),t._v(" 2.1 核心概念")]),t._v(" "),r("h4",{attrs:{id:"_2-1-1-docker-镜像"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-1-docker-镜像"}},[t._v("#")]),t._v(" 2.1.1 Docker 镜像")]),t._v(" "),r("p",[t._v("相当于是一个 root 文件系统, 比如官方镜像 ubuntu:16.04 就包含了完整的一套Ubuntu16.04最小系统的 root 文件系统. 镜像是创建 Docker 容器的基础. 通过版本管理和增量的文件系统, Docker 提供了一套十分简单的机制来创建和更新现有的镜像，用户可以从网上下载一个已经做好的应用镜像并直接使用")]),t._v(" "),r("h4",{attrs:{id:"_2-1-2-docker-容器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-2-docker-容器"}},[t._v("#")]),t._v(" 2.1.2 Docker 容器")]),t._v(" "),r("p",[t._v("Docker 容器类似于一个轻量级的沙箱，Docker 利用容器来运行和隔离应用. 容器是从镜像创建的应用运行实例. 可以将其启动、开始、停止、删除，而这些容器都是彼此相互隔离的、互不可见的. 可以把容器看做是一个简易版的 Linux 系统环境（包括root 用户权限、进程空间、用户空间和网络空间等）以及运行在其中的应用程序打包而成的盒子.")]),t._v(" "),r("p",[r("strong",[t._v("镜像自身是只读的. 容器从镜像启动的时候，会在镜像的最上层创建一个可写层. 同一个 image 文件, 可以生成多个同时运行的容器实例.")])]),t._v(" "),r("h4",{attrs:{id:"_2-1-3-docker-仓库"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-3-docker-仓库"}},[t._v("#")]),t._v(" 2.1.3 Docker 仓库")]),t._v(" "),r("p",[t._v("Docker 仓库类似于代码仓库，它是 Docker 集中存放镜像文件的场所. Docker 利用仓库管理镜像的设计理念与 Git 非常相似，实际上在理念设计上借鉴了 Git 的很多优秀思想. Docker 仓库分为：")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("公开仓库(最大的公开仓库是官方提供的 Docker Hub,官网 https://hub.docker.com/ )")])]),t._v(" "),r("li",[r("p",[t._v("私有仓库（Harbor）")])])]),t._v(" "),r("h4",{attrs:{id:"_2-1-4-docker-客户端"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-4-docker-客户端"}},[t._v("#")]),t._v(" 2.1.4 Docker 客户端")]),t._v(" "),r("p",[t._v("Docker 客户端通过命令行或者其他工具使用 Docker SDK (https://docs.docker.com/develop/sdk/) 与Docker 的守护进程通信. Docker 使用客户端-服务器 (C/S) 架构模式，使用远程 API 来管理和创建Docker 容器。")]),t._v(" "),r("h4",{attrs:{id:"_2-1-5-docker-主机"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-5-docker-主机"}},[t._v("#")]),t._v(" 2.1.5 Docker 主机")]),t._v(" "),r("p",[t._v("一个用于执行 Docker 守护进程和容器的物理或者虚拟的机器.")]),t._v(" "),r("h4",{attrs:{id:"_2-1-6-docker-machine"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-6-docker-machine"}},[t._v("#")]),t._v(" 2.1.6 Docker Machine")]),t._v(" "),r("p",[t._v("Docker Machine 是一个简化 Docker 安装的命令行工具，通过一个简单的命令行即可在相应的平台上安装 Docker，比如 VirtualBox、 Digital Ocean、Microsoft Azure")]),t._v(" "),r("h3",{attrs:{id:"_2-2-安装配置"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-安装配置"}},[t._v("#")]),t._v(" 2.2 安装配置")]),t._v(" "),r("h4",{attrs:{id:"_2-2-1-linux-下安装最新版本的docker"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-linux-下安装最新版本的docker"}},[t._v("#")]),t._v(" 2.2.1 Linux 下安装最新版本的docker")]),t._v(" "),r("h5",{attrs:{id:"_2-2-1-1-ubuntu"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-1-ubuntu"}},[t._v("#")]),t._v(" 2.2.1.1 UBUNTU")]),t._v(" "),r("p",[t._v("此处推荐：curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun")]),t._v(" "),r("h5",{attrs:{id:"_2-2-1-2-centos"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-1-2-centos"}},[t._v("#")]),t._v(" 2.2.1.2 Centos")]),t._v(" "),r("p",[t._v("此处推荐：curl -fsSL https://get.docker.com/ | sh")]),t._v(" "),r("h4",{attrs:{id:"_2-2-2-windows"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-2-windows"}},[t._v("#")]),t._v(" 2.2.2 Windows")]),t._v(" "),r("p",[t._v("Docker 并非是一个通用的容器工具，它依赖于已存在并运行的 Linux 内核环境。Docker 实质上是在已经运行的 Linux 下制造了一个隔离的文件环境，因此它执行的效率几乎等同于所部署的 Linux 主机. 因此，Docker 必须部署在 Linux 内核的系统上. 如果其他系统想部署Docker 就必须安装一个虚拟 Linux 环境. 可以去官网上直接下载安装. 过程在此省略.")]),t._v(" "),r("h4",{attrs:{id:"_2-2-3-macos"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-3-macos"}},[t._v("#")]),t._v(" 2.2.3 MacOS")]),t._v(" "),r("p",[t._v("参考：")]),t._v(" "),r("p",[t._v("(1) 命令行安装 brew install --cask --appdir=/Applications docker")]),t._v(" "),r("p",[t._v("(2) 可以直接去官网上下载安装镜像进行安装")]),t._v(" "),r("h4",{attrs:{id:"_2-2-4-其他"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-4-其他"}},[t._v("#")]),t._v(" 2.2.4 其他")]),t._v(" "),r("p",[t._v("转到官网：https://www.docker.com/get-started/")]),t._v(" "),r("h3",{attrs:{id:"_2-3-总体架构图"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-总体架构图"}},[t._v("#")]),t._v(" 2.3 总体架构图")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/zhaoyb-coder/pic-repo/main/image-20241017100309420.png",alt:"image-20241017100309420"}})]),t._v(" "),r("h2",{attrs:{id:"_3-docker-的相关简单命令"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-docker-的相关简单命令"}},[t._v("#")]),t._v(" 3. Docker 的相关简单命令")]),t._v(" "),r("h3",{attrs:{id:"_3-1-基础命令"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-基础命令"}},[t._v("#")]),t._v(" 3.1 基础命令")]),t._v(" "),r("p",[t._v("docker version")]),t._v(" "),r("p",[t._v("docekr info")]),t._v(" "),r("p",[t._v("docker --help")]),t._v(" "),r("h3",{attrs:{id:"_3-2-镜像相关命令"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-镜像相关命令"}},[t._v("#")]),t._v(" 3.2 镜像相关命令")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[t._v("序号")]),t._v(" "),r("th",[t._v("帮助命令")]),t._v(" "),r("th",[t._v("使用命令样例")]),t._v(" "),r("th",[t._v("备注")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[t._v("1")]),t._v(" "),r("td",[t._v("docker images --help")]),t._v(" "),r("td",[t._v("docker images")]),t._v(" "),r("td",[t._v("List images")])]),t._v(" "),r("tr",[r("td",[t._v("2")]),t._v(" "),r("td",[t._v("docker pull --help")]),t._v(" "),r("td",[t._v("docker pull ubuntu:13.10 "),r("br"),t._v("docker pull redis:5.0.12 "),r("br"),t._v("docker pull redis "),r("br"),t._v("docker pull 192.168.244.142:8443/library/redis:v6.0.8")]),t._v(" "),r("td",[t._v("Pull an image or a repository froma registry")])]),t._v(" "),r("tr",[r("td",[t._v("3")]),t._v(" "),r("td",[t._v("docker search --help")]),t._v(" "),r("td",[t._v("docker search httpd")]),t._v(" "),r("td",[t._v("Search the Docker Hub for images")])]),t._v(" "),r("tr",[r("td",[t._v("4")]),t._v(" "),r("td",[t._v("docker commit --help")]),t._v(" "),r("td",[t._v("docker pull ubuntu:14.04  "),r("br"),t._v("docker run -it ubuntu:14.04 /bin/bash  "),r("br"),t._v("root@bda3295636a3:/#  "),r("br"),t._v("root@bda3295636a3:/#  "),r("br"),t._v("touch 1.txt  "),r("br"),t._v("root@bda3295636a3:/#  "),r("br"),t._v('exit docker commit -m "Added a new file" -a "Docker Newbee" bda3295636a3 test:0.1 (bda3295636a3 是 containerid)')]),t._v(" "),r("td",[t._v("Create a new image froma container's changes")])]),t._v(" "),r("tr",[r("td",[t._v("5")]),t._v(" "),r("td",[t._v("docker build --help")]),t._v(" "),r("td",[t._v("创建 Dockerfile，在 Dockerf 所在目录执行：  "),r("br"),t._v("docker build -t gcc-image:1.0 .")]),t._v(" "),r("td",[t._v("Build an image from a Dockerfile (可见后续章节的例子)")])]),t._v(" "),r("tr",[r("td",[t._v("6")]),t._v(" "),r("td",[t._v("docker tag --help")]),t._v(" "),r("td",[t._v("docker pull redis:6.0.8 "),r("br"),t._v("docker tag redis:6.0.8 192.168.244.142:8443/library/redis:v6.0.8 "),r("br"),t._v("docker login https://192.168.244.142:8443/harbor -uadmin "),r("br"),t._v("docker push 192.168.244.142:8443/library/redis:v6.0.8")]),t._v(" "),r("td",[t._v("Create a tag TARGET_IMAGE that referstoSOURCE_IMAGE")])]),t._v(" "),r("tr",[r("td",[t._v("7")]),t._v(" "),r("td",[t._v("docker push --help")]),t._v(" "),r("td",[t._v("docker push 192.168.244.142:8443/library/redis:v6.0.8")]),t._v(" "),r("td",[t._v("Push an image or a repository to a registry")])]),t._v(" "),r("tr",[r("td",[t._v("8")]),t._v(" "),r("td",[t._v("docker history --help")]),t._v(" "),r("td",[t._v("docker history 1730c6f650e2 "),r("br"),t._v("docker history redis")]),t._v(" "),r("td",[t._v("Show the history of an image")])]),t._v(" "),r("tr",[r("td",[t._v("9")]),t._v(" "),r("td",[t._v("docker inspect --help")]),t._v(" "),r("td",[t._v("docker inspect 87c26977fd90  "),r("br"),t._v("docker inspect redis")]),t._v(" "),r("td",[t._v("Return low-level information on Docker objects")])]),t._v(" "),r("tr",[r("td",[t._v("10")]),t._v(" "),r("td",[t._v("docker save --help")]),t._v(" "),r("td",[t._v("docker save -o redis_6.0.8.tar redis:6.0.8   "),r("br"),t._v("docker save redis:6.0.8 > redis_6.0.8-1.tar")]),t._v(" "),r("td",[t._v("Save one or more images to a tar archive(streamedto STDOUT by default)")])]),t._v(" "),r("tr",[r("td",[t._v("11")]),t._v(" "),r("td",[t._v("docker import --help")]),t._v(" "),r("td",[t._v("wget http://download.openvz.org/template/precreated/ubuntu-14.04-x86_64-minimal.tar.gz"),r("br"),t._v(" cat ubuntu-14.04-x86_64-minimal.tar.gz | docker import - ubuntu:14.04"),r("br"),t._v("docker images")]),t._v(" "),r("td",[t._v("Import the contents froma tarball tocreateafilesystem image")])]),t._v(" "),r("tr",[r("td",[t._v("12")]),t._v(" "),r("td",[t._v("docker export --help")]),t._v(" "),r("td",[t._v("docker export harbor-jobservice > harbor-jobservice.tar"),r("br"),t._v(" (harbor-jobservice 是容器名)")]),t._v(" "),r("td",[t._v("Export a container's filesystemas a tar archive")])]),t._v(" "),r("tr",[r("td",[t._v("13")]),t._v(" "),r("td",[t._v("docker load --help")]),t._v(" "),r("td",[t._v("docker load --input redis_6.0.8.tar")]),t._v(" "),r("td",[t._v("Load an image from a tar archive or STDIN")])]),t._v(" "),r("tr",[r("td",[t._v("14")]),t._v(" "),r("td",[t._v("docker rmi --help")]),t._v(" "),r("td",[t._v("docker rmi 16ecd2772934(可以测试一下被多仓库引用) "),r("br"),t._v("docker rmi -f 16ecd2772934")]),t._v(" "),r("td",[t._v("Remove one or more images")])])])]),t._v(" "),r("h3",{attrs:{id:"_3-3-容器相关命令"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-容器相关命令"}},[t._v("#")]),t._v(" 3.3 容器相关命令")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[t._v("序号")]),t._v(" "),r("th",[t._v("帮助命令")]),t._v(" "),r("th",[t._v("使用样例")]),t._v(" "),r("th",[t._v("备注")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[t._v("1")]),t._v(" "),r("td",[t._v("docker create --help")]),t._v(" "),r("td",[t._v("docker create -it ubuntu:latest")]),t._v(" "),r("td",[t._v("Create a new container")])]),t._v(" "),r("tr",[r("td",[t._v("2")]),t._v(" "),r("td",[t._v("docker run --help")]),t._v(" "),r("td",[t._v("docker run -d --name redis-node-1 --net host --privileged=true -v /data/redis/share/redis-node-1:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6381 "),r("br"),t._v("docker run -dit -p 33899:3389 -m 1024M --memory-swap -1 --privileged --name LinuxFortContainer_tanghm linuxfort0318_1745 /start.sh 0f03cbf59a3549d3u7yx8mYKcKlXW2AN3dunfA== "),r("br"),t._v("docker run -d -p 80:80 --name webserver nginx")]),t._v(" "),r("td",[t._v("Run a command in a new container  "),r("br"),t._v("docker run 只在第一次运行时使用,将镜像放到容器中,以后再次启动这个容器时,只需要使用命令 docker start 即可,docker run 相当于执行了两步操作:将镜像放入容器中(docker create),然后将容器启动,使之变成运行时容器(docker start), 参数说明：  "),r("br"),t._v("-d 后台运行容器,并返回容器 ID  "),r("br"),t._v("-i 交互式运行  "),r("br"),t._v("-t tty 终端  "),r("br"),t._v("--memory 限制容器可以使用的内存，如果没有指定--memory-swap那么默认和--memory 一样大  "),r("br"),t._v("eg: --memory 200m 没有--memory-swap 参数，那么容器可以使用的内存为400m  "),r("br"),t._v("--memory-swap 设置 swap 区可以使用的内存大小，默认和--memory一样大，必须>=--memory  "),r("br"),t._v("--cpu-shares 表示占有 cpu 的相对权重 "),r("br"),t._v("eg: 假设在同一台物理主机上启动了如下2 个容器，容器1占用的cpu是容器 2 占有的 cpu 的 2 倍。  "),r("br"),t._v("同一台物理主机上  "),r("br"),t._v("容器 1: docker run -d --cpu-shares 10 ...  "),r("br"),t._v("容器 2: docker run -d --cpu-shares 5 ... - "),r("br"),t._v("-name 给容器起的名字  "),r("br"),t._v("--net 指定容器运行的网络 "),r("br"),t._v(" -v 指定 volume 的路径  <br / >data volume 模式：  "),r("br"),t._v("别名：容器里面的路径 "),r("br"),t._v("mysql:/var/lib/mysql  "),r("br"),t._v("/var/lib/mysql 为 Dockerfile 中的volume 的值 "),r("br"),t._v("使用 docker volume ls 命令查看 "),r("br"),t._v("本地创建 mysql 数据卷： "),r("br"),t._v("docker create volume--namemysql  "),r("br"),t._v("bind mouting 模式：  "),r("br"),t._v("本地路径：容器路径  "),r("br"),t._v("/var/data:/var/容器目录 "),r("br"),t._v("本地目录和容器目录中的文件修改都会实时同步 "),r("br"),t._v("--ip 指定容器的 ip 地址  "),r("br"),t._v("-P 随机映射一个端口  "),r("br"),t._v("-p 本地端口：容器端口。 将容器中的某个端口映射到本地的某个端口上  "),r("br"),t._v("-e 设置环境变量  "),r("br"),t._v("--volumes-from 参数用于连接某个指定容器的卷，从而可以访问到指定容器中的所有的卷.  "),r("br"),t._v("--rm 表示容器运行完成后自动删除 "),r("br"),t._v("-h 设置 host 主机的名称")])]),t._v(" "),r("tr",[r("td",[t._v("3")]),t._v(" "),r("td",[t._v("docker start --help")]),t._v(" "),r("td",[t._v("docker start 36aebaa2ccb7 "),r("br"),t._v("docker start loving_pike")]),t._v(" "),r("td",[t._v("Start one or more stopped containers  "),r("br"),t._v("start 的作用是,重新启动已存在的镜像, 也就是说，如果使用这个命令,我们必须事先知道这个容器的ID，或者这个容器的名字，我们可以使用dockerps -a 查看容器信息, 可对比 docker run 进行学习")])]),t._v(" "),r("tr",[r("td",[t._v("4")]),t._v(" "),r("td",[t._v("docker restart --help")]),t._v(" "),r("td",[t._v("docker restart 36aebaa2ccb7 "),r("br"),t._v("docker restart loving_pike")]),t._v(" "),r("td",[t._v("Restart one or more containers  "),r("br"),t._v("36aebaa2ccb7--containerid  "),r("br"),t._v("loving_pike--containername")])]),t._v(" "),r("tr",[r("td",[t._v("5")]),t._v(" "),r("td",[t._v("docker logs --help")]),t._v(" "),r("td",[t._v("docker logs 36aebaa2ccb7 "),r("br"),t._v("docker logs loving_pike")]),t._v(" "),r("td",[t._v("Fetch the logs of a container "),r("br"),t._v("36aebaa2ccb7--containerid "),r("br"),t._v("loving_pike--containername")])]),t._v(" "),r("tr",[r("td",[t._v("6")]),t._v(" "),r("td",[t._v("docker stop --help")]),t._v(" "),r("td",[t._v("docker stop 36aebaa2ccb7 "),r("br"),t._v("docker stop loving_pike")]),t._v(" "),r("td",[t._v("Stop one or more running containers")])]),t._v(" "),r("tr",[r("td",[t._v("7")]),t._v(" "),r("td",[t._v("docker kill --help")]),t._v(" "),r("td",[t._v("docker kill 36aebaa2ccb7 "),r("br"),t._v("docker kill loving_pike")]),t._v(" "),r("td",[t._v("Kill one or more running containers")])]),t._v(" "),r("tr",[r("td",[t._v("8")]),t._v(" "),r("td",[t._v("docker ps --help")]),t._v(" "),r("td",[t._v("--help docker ps -l 显示最近创建的容器(包括所有状态的容 器)")]),t._v(" "),r("td",[t._v("List containers")])]),t._v(" "),r("tr",[r("td",[t._v("9")]),t._v(" "),r("td",[t._v("docker attach --help")]),t._v(" "),r("td",[t._v("docker run -itd --name ubuntu-test ubuntu /bin/bash  "),r("br"),t._v("docker attach 1146042c384e  "),r("br"),t._v("docker ps -a |grep 1146042c384e")]),t._v(" "),r("td",[t._v("Attach local standard input, output, and error streams toarunningcontainer  "),r("br"),t._v("1146042c384e--containerid  "),r("br"),t._v("在使用-d 参数运行容器时, 容器启动后会进入后台, 此时想要进入容器, 可以通过这个指令进入, 不推荐大家使用dockerattach命令，因为使用它在退出容器终端，会导致容器的停止")])]),t._v(" "),r("tr",[r("td",[t._v("10")]),t._v(" "),r("td",[t._v("docker exec --help")]),t._v(" "),r("td",[t._v("docker run -itd --name ubuntu-test-01 ubuntu /bin/bash  "),r("br"),t._v("docker exec -it ubuntu-test-01 /bin/bash  "),r("br"),t._v("root@21bd6d174b21:/# exit  "),r("br"),t._v("docker ps -a | grep ubuntu-test-01")]),t._v(" "),r("td",[t._v("Run a command in a running container "),r("br"),t._v("在使用 -d 参数运行容器时，容器启动后会进入后台, 此时想要进入容器，可以通过这个指令进入, 推荐大家使用dockerexec命令，因为使用它在退出容器终端，不会导致容器的停止")])]),t._v(" "),r("tr",[r("td",[t._v("11")]),t._v(" "),r("td",[t._v("docker rm --help")]),t._v(" "),r("td",[t._v("docker rm 1146042c384e")]),t._v(" "),r("td",[t._v("Remove one or more containers")])]),t._v(" "),r("tr",[r("td",[t._v("12")]),t._v(" "),r("td",[t._v("docker cp --help")]),t._v(" "),r("td",[t._v("docker run -itd --name ubuntu-test ubuntu /bin/bash  "),r("br"),t._v("docker cp ubuntu-test:/ ./")]),t._v(" "),r("td",[t._v("Copy files/folders between a container and the local filesystem")])]),t._v(" "),r("tr",[r("td",[t._v("13")]),t._v(" "),r("td",[t._v("docker pause --help")]),t._v(" "),r("td",[t._v("docker pause a1e5d03c3a0d "),r("br"),t._v("docker pause ubuntu-test")]),t._v(" "),r("td",[t._v("Pause all processes within one or more containers")])]),t._v(" "),r("tr",[r("td",[t._v("14")]),t._v(" "),r("td",[t._v("docker unpause --help")]),t._v(" "),r("td",[t._v("docker unpause a1e5d03c3a0d "),r("br"),t._v("docker unpause ubuntu-test")]),t._v(" "),r("td",[t._v("Unpause all processes within one or more containers")])]),t._v(" "),r("tr",[r("td",[t._v("15")]),t._v(" "),r("td",[t._v("docker rename --help")]),t._v(" "),r("td",[t._v("docker rename keen_cori keen_cori_new")]),t._v(" "),r("td",[t._v("Rename a container")])])])]),t._v(" "),r("h3",{attrs:{id:"_3-4-其他"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-其他"}},[t._v("#")]),t._v(" 3.4 其他")]),t._v(" "),r("p",[t._v("更多命令可以查阅相关数据或手册")]),t._v(" "),r("h2",{attrs:{id:"_4-docker-网络"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-docker-网络"}},[t._v("#")]),t._v(" 4. Docker 网络")]),t._v(" "),r("h3",{attrs:{id:"_4-1-查看-docker-不启动和启动时的网络情况"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-查看-docker-不启动和启动时的网络情况"}},[t._v("#")]),t._v(" 4.1 查看 docker 不启动和启动时的网络情况")]),t._v(" "),r("p",[t._v("一台没怎么用过的 CentOS7 虚拟机一般有 ens33, lo, virbr0 这三个配置")]),t._v(" "),r("h3",{attrs:{id:"_4-2-常用基本命令"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-常用基本命令"}},[t._v("#")]),t._v(" 4.2 常用基本命令")]),t._v(" "),r("p",[t._v("用【docker network --help】进行查看.")]),t._v(" "),r("h3",{attrs:{id:"_4-3-docker-网络的用途"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-docker-网络的用途"}},[t._v("#")]),t._v(" 4.3 Docker 网络的用途")]),t._v(" "),r("p",[t._v("容器间的互联和通信以及端口映射;")]),t._v(" "),r("p",[t._v("容器 IP 变动时候可以通过服务名直接网络通信而不受到影响")]),t._v(" "),r("h3",{attrs:{id:"_4-4-网络模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-网络模式"}},[t._v("#")]),t._v(" 4.4 网络模式")]),t._v(" "),r("h4",{attrs:{id:"_4-4-1-分类"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-1-分类"}},[t._v("#")]),t._v(" 4.4.1 分类")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[t._v("Docker 网络模式")]),t._v(" "),r("th",[t._v("配置")]),t._v(" "),r("th",[t._v("说明")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[t._v("host 模式")]),t._v(" "),r("td",[t._v("--net=host")]),t._v(" "),r("td",[t._v("容器将不会虚拟出自己的网卡，配置自己的IP 等，而是使用宿主机的 IP 和端口")])]),t._v(" "),r("tr",[r("td",[t._v("container 模式")]),t._v(" "),r("td",[t._v("--net=container:NAME_or_ID")]),t._v(" "),r("td",[t._v("创建的容器不会创建自己的网卡，配置自己的IP，而是和一个指定的容器共享 IP、端口范围")])]),t._v(" "),r("tr",[r("td",[t._v("none")]),t._v(" "),r("td",[t._v("--network none")]),t._v(" "),r("td",[t._v("该模式关闭了容器的网络功能")])]),t._v(" "),r("tr",[r("td",[t._v("bridge 模式")]),t._v(" "),r("td",[t._v("使用--network bridge 指定， 默认使用 docker0")]),t._v(" "),r("td",[t._v("此模式会为每一个容器分配、设置IP 等，并将容器连接到一个 docker0 虚拟网桥，通过docker0 网桥以及 iptables nat 表配置与宿主之间的关联, 当 Docker 进程启动时，会在主机上创建一个名为docker0 的虚拟网桥，此主机上启动的Docker 容器会连接到这个虚拟网桥上。虚拟网桥的工作方式和物理交换机类似，这样主机上的所有容器就通过交换机连在了一个二层网络中.")])])])]),t._v(" "),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/zhaoyb-coder/pic-repo/main/image-20241017132956969.png",alt:"image-20241017132956969"}})]),t._v(" "),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/zhaoyb-coder/pic-repo/main/image-20241017133004671.png",alt:"image-20241017133004671"}})]),t._v(" "),r("h4",{attrs:{id:"_4-4-2-容器实例内默认网络-ip-生产规则"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-2-容器实例内默认网络-ip-生产规则"}},[t._v("#")]),t._v(" 4.4.2 容器实例内默认网络 IP 生产规则")]),t._v(" "),r("p",[t._v("docker 容器内部的 ip 是有可能会发生改变的.")]),t._v(" "),r("h4",{attrs:{id:"_4-4-3-简单测试"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-3-简单测试"}},[t._v("#")]),t._v(" 4.4.3 简单测试")]),t._v(" "),r("p",[t._v("docker run -d -p 8081:8080 --name tomcate81 billygoo/tomcat8-jdk8")]),t._v(" "),r("p",[t._v("docker run -d -p 8082:8080 --name tomcate82 billygoo/tomcat8-jdk8")]),t._v(" "),r("p",[t._v("docker run -d -p 8083:8080 --network host --name tomcat83 billygoo/tomcat8-jdk8")]),t._v(" "),r("p",[t._v("docker run -d -p 8083:8080 --name tomcat84 billygoo/tomcat8-jdk8")]),t._v(" "),r("h4",{attrs:{id:"_4-4-4-端口映射的简单示例"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-4-端口映射的简单示例"}},[t._v("#")]),t._v(" 4.4.4 端口映射的简单示例")]),t._v(" "),r("p",[t._v("(1) 使用-P 来做映射宿主机的指定端口, 例如【docker run -d -P redis】")]),t._v(" "),r("p",[t._v("(2) 使用【-p IP::ContainerPort】 映射到指定地址的任意端口，使用IP::ContainerPort 绑定localhost 的任意端口到容器的 6379 端口，本地主机会自动分配一个端口, 例如【docker run-d-p 127.0.0.1::6379 redis】")]),t._v(" "),r("p",[t._v("(3）使用【-p IP:HostPort:ContainerPort】映射到指定地址的指定端口，例如【docker run -d-p127.0.0.1:6379:6379 redis】")]),t._v(" "),r("p",[t._v("(4) 使用【-p HostPort:ContainerPort】映射所有接口地址 ,例如【docker run -d -p 6379:6379-p5000:5000 redis】")]),t._v(" "),r("h2",{attrs:{id:"_5-dockerfile"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-dockerfile"}},[t._v("#")]),t._v(" 5.Dockerfile")]),t._v(" "),r("h3",{attrs:{id:"_5-1-基本结构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-基本结构"}},[t._v("#")]),t._v(" 5.1 基本结构")]),t._v(" "),r("h4",{attrs:{id:"_5-1-1-说明"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-1-说明"}},[t._v("#")]),t._v(" 5.1.1 说明")]),t._v(" "),r("p",[t._v("Dockerfile 由一行行命令语句组成，并且支持以#开头的注释行。一般而言，Dockerfile 分为四部分：基础镜像信息、维护者信息、镜像操作指令和容器启动时执行指令。例如：")]),t._v(" "),r("div",{staticClass:"language-dockerfile line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[r("code",[r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# This Dockerfile uses the ubuntu image")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# VERSION 2 - EDITION 1")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Author: docker_user ")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Command format: Instruction [arguments / command] .. ")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Base image to use, this must be set as the first line ")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token instruction"}},[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" ubuntu")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Maintainer: docker_user <docker_user at email.com> (@docker_user)")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token instruction"}},[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("MAINTAINER")]),t._v(" docker_user docker_user@email.com")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Commands to update the image ")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token instruction"}},[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" echo "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"deb http://archive.ubuntu.com/ubuntu/ raring main universe"')]),t._v(" >> /etc/apt/ ")]),t._v("\nsources.list \n"),r("span",{pre:!0,attrs:{class:"token instruction"}},[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" apt-get update && apt-get install -y nginx ")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token instruction"}},[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" echo "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"\\ndaemon off;"')]),t._v(" >> /etc/nginx/nginx.conf ")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Commands when creating a new container ")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token instruction"}},[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CMD")]),t._v(" /usr/sbin/nginx")]),t._v("\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br"),r("span",{staticClass:"line-number"},[t._v("3")]),r("br"),r("span",{staticClass:"line-number"},[t._v("4")]),r("br"),r("span",{staticClass:"line-number"},[t._v("5")]),r("br"),r("span",{staticClass:"line-number"},[t._v("6")]),r("br"),r("span",{staticClass:"line-number"},[t._v("7")]),r("br"),r("span",{staticClass:"line-number"},[t._v("8")]),r("br"),r("span",{staticClass:"line-number"},[t._v("9")]),r("br"),r("span",{staticClass:"line-number"},[t._v("10")]),r("br"),r("span",{staticClass:"line-number"},[t._v("11")]),r("br"),r("span",{staticClass:"line-number"},[t._v("12")]),r("br"),r("span",{staticClass:"line-number"},[t._v("13")]),r("br"),r("span",{staticClass:"line-number"},[t._v("14")]),r("br"),r("span",{staticClass:"line-number"},[t._v("15")]),r("br")])]),r("h4",{attrs:{id:"_5-1-2-基于-debian-jessie-镜像安装nginx-的dockerfile示例"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-2-基于-debian-jessie-镜像安装nginx-的dockerfile示例"}},[t._v("#")]),t._v(" 5.1.2 基于 debian:jessie 镜像安装Nginx 的Dockerfile示例")]),t._v(" "),r("div",{staticClass:"language-dockerfile line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[r("code",[r("span",{pre:!0,attrs:{class:"token instruction"}},[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" debian:jessie ")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token instruction"}},[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("MAINTAINER")]),t._v(" NGINX Docker Maintainers "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"docker-maint@nginx.com"')]),t._v(" ")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token instruction"}},[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENV")]),t._v(" NGINX_VERSION 1.10.1-1~jessie ")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token instruction"}},[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" apt-key adv --keyserver hkp://pgp.mit.edu:80 --recv-keys 573BFD6B3D8FBC64107")]),t._v('\n\t9A6ABABF5BD827BD9BF62 \\ \n\t&& echo "deb http://nginx.org/packages/debian/ jessie nginx" >> /etc/ \n\t\tapt/sources.list \\ \n\t&& apt-get update \\ \n\t&& apt-get install --no-install-recommends --no-install-suggests -y \\ \n\tca-certificates \\ \n\tnginx=${NGINX_VERSION} \\ \n\tnginx-module-xslt \\ \n\tnginx-module-geoip \\ \n\tnginx-module-image-filter \\ \n\tnginx-module-perl \\ \n\tnginx-module-njs \\ \n\tgettext-base \\ \n\t&& rm -rf /var/lib/apt/lists/*\n'),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# forward request and error logs to docker log collector ")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token instruction"}},[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" ln -sf /dev/stdout /var/log/nginx/access.log \\ ")]),t._v("\n\t&& ln -sf /dev/stderr /var/log/nginx/error.log \n"),r("span",{pre:!0,attrs:{class:"token instruction"}},[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("EXPOSE")]),t._v(" 80 443 ")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token instruction"}},[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CMD")]),t._v(" ["),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"nginx"')]),t._v(", "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-g"')]),t._v(", "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"daemon off;"')]),t._v("]")]),t._v("\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br"),r("span",{staticClass:"line-number"},[t._v("3")]),r("br"),r("span",{staticClass:"line-number"},[t._v("4")]),r("br"),r("span",{staticClass:"line-number"},[t._v("5")]),r("br"),r("span",{staticClass:"line-number"},[t._v("6")]),r("br"),r("span",{staticClass:"line-number"},[t._v("7")]),r("br"),r("span",{staticClass:"line-number"},[t._v("8")]),r("br"),r("span",{staticClass:"line-number"},[t._v("9")]),r("br"),r("span",{staticClass:"line-number"},[t._v("10")]),r("br"),r("span",{staticClass:"line-number"},[t._v("11")]),r("br"),r("span",{staticClass:"line-number"},[t._v("12")]),r("br"),r("span",{staticClass:"line-number"},[t._v("13")]),r("br"),r("span",{staticClass:"line-number"},[t._v("14")]),r("br"),r("span",{staticClass:"line-number"},[t._v("15")]),r("br"),r("span",{staticClass:"line-number"},[t._v("16")]),r("br"),r("span",{staticClass:"line-number"},[t._v("17")]),r("br"),r("span",{staticClass:"line-number"},[t._v("18")]),r("br"),r("span",{staticClass:"line-number"},[t._v("19")]),r("br"),r("span",{staticClass:"line-number"},[t._v("20")]),r("br"),r("span",{staticClass:"line-number"},[t._v("21")]),r("br"),r("span",{staticClass:"line-number"},[t._v("22")]),r("br"),r("span",{staticClass:"line-number"},[t._v("23")]),r("br")])]),r("h4",{attrs:{id:"_5-1-3-基于buildpack-deps-jessie-scm镜像安装golang相关环境的-dockerfile-示例"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-3-基于buildpack-deps-jessie-scm镜像安装golang相关环境的-dockerfile-示例"}},[t._v("#")]),t._v(" 5.1.3 基于buildpack-deps:jessie-scm镜像安装Golang相关环境的 Dockerfile 示例")]),t._v(" "),r("div",{staticClass:"language-dockerfile line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[r("code",[r("span",{pre:!0,attrs:{class:"token instruction"}},[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" buildpack-deps:jessie-scm")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# gcc for cgo ")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token instruction"}},[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" apt-get update && apt-get install -y --no-install-recommends "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("\\")]),t._v("\n\tg++ \\ ")]),t._v("\n\tgcc \\\n\tlibc6-dev \\ \n\tmake \\ \n\t&& rm -rf /var/lib/apt/lists/* \n"),r("span",{pre:!0,attrs:{class:"token instruction"}},[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENV")]),t._v(" GOLANG_VERSION 1.6.3 ")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token instruction"}},[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENV")]),t._v(" GOLANG_DOWNLOAD_URL https://golang.org/dl/go"),r("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$GOLANG_VERSION")]),t._v(".linux-amd64.tar.gz ")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token instruction"}},[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENV")]),t._v(" GOLANG_DOWNLOAD_SHA256 cdde5e08530c0579255d6153b08fdb3b8e47caabbe717bc7bcd7561275a87aeb ")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token instruction"}},[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" curl -fsSL "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$GOLANG_DOWNLOAD_URL"')]),t._v(" -o golang.tar.gz \\ ")]),t._v('\n\t&& echo "$GOLANG_DOWNLOAD_SHA256 golang.tar.gz" | sha256sum -c - \\\n    && tar -C /usr/local -xzf golang.tar.gz \\ \n    && rm golang.tar.gz \n'),r("span",{pre:!0,attrs:{class:"token instruction"}},[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENV")]),t._v(" GOPATH /go ")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token instruction"}},[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENV")]),t._v(" PATH "),r("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$GOPATH")]),t._v("/bin:/usr/local/go/bin:"),r("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$PATH")])]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token instruction"}},[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" mkdir -p "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$GOPATH/src"')]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$GOPATH/bin"')]),t._v(" && chmod -R 777 "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$GOPATH"')]),t._v(" ")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token instruction"}},[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WORKDIR")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$GOPATH")])]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token instruction"}},[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" go-wrapper /usr/local/bin/")]),t._v("\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br"),r("span",{staticClass:"line-number"},[t._v("3")]),r("br"),r("span",{staticClass:"line-number"},[t._v("4")]),r("br"),r("span",{staticClass:"line-number"},[t._v("5")]),r("br"),r("span",{staticClass:"line-number"},[t._v("6")]),r("br"),r("span",{staticClass:"line-number"},[t._v("7")]),r("br"),r("span",{staticClass:"line-number"},[t._v("8")]),r("br"),r("span",{staticClass:"line-number"},[t._v("9")]),r("br"),r("span",{staticClass:"line-number"},[t._v("10")]),r("br"),r("span",{staticClass:"line-number"},[t._v("11")]),r("br"),r("span",{staticClass:"line-number"},[t._v("12")]),r("br"),r("span",{staticClass:"line-number"},[t._v("13")]),r("br"),r("span",{staticClass:"line-number"},[t._v("14")]),r("br"),r("span",{staticClass:"line-number"},[t._v("15")]),r("br"),r("span",{staticClass:"line-number"},[t._v("16")]),r("br"),r("span",{staticClass:"line-number"},[t._v("17")]),r("br"),r("span",{staticClass:"line-number"},[t._v("18")]),r("br"),r("span",{staticClass:"line-number"},[t._v("19")]),r("br"),r("span",{staticClass:"line-number"},[t._v("20")]),r("br")])]),r("h4",{attrs:{id:"_5-1-4-永远的-helloworld-java"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-4-永远的-helloworld-java"}},[t._v("#")]),t._v(" 5.1.4 永远的 helloworld(JAVA)")]),t._v(" "),r("p",[t._v("/root/dockerStudy/20220330/javaHelloWorld")]),t._v(" "),r("p",[t._v("(1)编写 Makefile")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/zhaoyb-coder/pic-repo/main/image-20241017133922215.png",alt:"image-20241017133922215"}})]),t._v(" "),r("p",[t._v("(2)构造镜像")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/zhaoyb-coder/pic-repo/main/image-20241017133939044.png",alt:"image-20241017133939044"}})]),t._v(" "),r("p",[t._v("(3) 运行镜像")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/zhaoyb-coder/pic-repo/main/image-20241017133955468.png",alt:"image-20241017133955468"}})]),t._v(" "),r("h3",{attrs:{id:"_5-2-指令说明"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-指令说明"}},[t._v("#")]),t._v(" 5.2 指令说明")]),t._v(" "),r("p",[t._v("指令的一般格式为 INSTRUCTION arguments，指令包括 FROM、MAINTAINER、RUN 等，参见下表：")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/zhaoyb-coder/pic-repo/main/image-20241017134151771.png",alt:"image-20241017134151771"}})]),t._v(" "),r("h3",{attrs:{id:"_5-3-最佳实践"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-最佳实践"}},[t._v("#")]),t._v(" 5.3 最佳实践")]),t._v(" "),r("p",[t._v("所谓最佳实践，实际上是从需求出发，来定制适合自己、高效方便的镜像。")]),t._v(" "),r("p",[t._v("首先，要尽量吃透每个指令的含义和执行效果，自己多编写一些简单的例子进行测试，弄清楚了再撰写正式的 Dockerfile。此外，Docker Hub 官方仓库中提供了大量的优秀镜像和对应的 Dockefile，可以通过阅读它们来学习如何撰写高效的 Dockerfile。")]),t._v(" "),r("p",[t._v("通过前辈总结了的一些实践经验，建议在生成镜像过程中，尝试从如下角度进行思考，完善所生成的镜像。")]),t._v(" "),r("ul",[r("li",[t._v("精简镜像用途： 尽量让每个镜像的用途都比较集中、单一，避免构造大而复杂、多功能的镜像；")]),t._v(" "),r("li",[t._v("选用合适的基础镜像： 过大的基础镜像会造成生成臃肿的镜像，一般推荐较为小巧的debian 镜像；")]),t._v(" "),r("li",[t._v("提供足够清晰的命令注释和维护者信息： Dockerfile 也是一种代码，需要考虑方便后续扩展和他人使用；")]),t._v(" "),r("li",[t._v("正确使用版本号： 使用明确的版本号信息，如 1.0，2.0，而非 latest，将避免内容不一致可能引发的惨案；")]),t._v(" "),r("li",[t._v("·减少镜像层数： 如果希望所生成镜像的层数尽量少，则要尽量合并指令，例如多个RUN指令可以合并为一条；")]),t._v(" "),r("li",[t._v("及时删除临时文件和缓存文件： 特别是在执行 apt-get 指令后，/var/cache/apt 下面会缓存一些安装包；")]),t._v(" "),r("li",[t._v("提高生成速度： 如合理使用缓存，减少内容目录下的文件，或使用.dockerignore 文件指定等；")]),t._v(" "),r("li",[t._v("调整合理的指令顺序： 在开启缓存的情况下，内容不变的指令尽量放在前面，这样可以尽量复用；")]),t._v(" "),r("li",[t._v("减少外部源的干扰： 如果确实要从外部引入数据，需要指定持久的地址，并带有版本信息，让他人可以重复而不出错。")])]),t._v(" "),r("h3",{attrs:{id:"_5-4-推荐一个-dockerfile-项目"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-推荐一个-dockerfile-项目"}},[t._v("#")]),t._v(" 5.4 推荐一个 Dockerfile 项目")]),t._v(" "),r("p",[t._v("Docker 公司在 Github 上维护了一个 Dockerfile 项目（https://github.com/dockerfile ），该项目为一些常见开源软件服务提供 Dockerfile 和自动构建方案。开发者可以根据该工程中的各服务介绍和 Dockerfile 来快速开发、测试和部署新的应用程序。")]),t._v(" "),r("h2",{attrs:{id:"_6-容器实战思考"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6-容器实战思考"}},[t._v("#")]),t._v(" 6.容器实战思考")]),t._v(" "),r("h3",{attrs:{id:"_6-1-docker-成功的原因"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-docker-成功的原因"}},[t._v("#")]),t._v(" 6.1 Docker 成功的原因")]),t._v(" "),r("p",[t._v("虽然 Docker 所依赖的容器技术存在已久，但 Docker 的出现才真正提供了易用的解决方案")]),t._v(" "),r("ul",[r("li",[t._v("Docker 首次创造了一种简单易行并且覆盖应用全生命周期的工作流，用户可以通过简单的指令或 Restful API 来拉取、打包、运行和维护容器.")]),t._v(" "),r("li",[t._v("Docker 提供了一种统一的实践方法，每个服务（或应用）维护一个Dockerfile 文件")]),t._v(" "),r("li",[t._v("Docker 正以一种前所未有的方式让用户可以在各种 Linux 发行版、各种开发环境中快速切换，这对应用开发者来说真是一种福音.")])]),t._v(" "),r("p",[r("strong",[t._v("真正解决用户痛点，真正带来效率的提升，是一个产品和技术能最终成功的关键")])]),t._v(" "),r("h3",{attrs:{id:"_6-2-研发人员怎么看-docker"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-研发人员怎么看-docker"}},[t._v("#")]),t._v(" 6.2 研发人员怎么看 Docker")]),t._v(" "),r("ul",[r("li",[t._v("快速上手新技术")]),t._v(" "),r("li",[t._v("容器化的代码仓库让工作更高效")]),t._v(" "),r("li",[t._v("面向业务编程，使用 Docker 快速掌握新技术要点并完成适当的技术储备，在工期紧急时可更好地专注业务开发")]),t._v(" "),r("li",[t._v("使用 Docker Hub 发布开源项目和学习")])]),t._v(" "),r("h3",{attrs:{id:"_6-3-容器化开发模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-容器化开发模式"}},[t._v("#")]),t._v(" 6.3 容器化开发模式")]),t._v(" "),r("h4",{attrs:{id:"_6-3-1-传统开发流程与容器化开发流程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-1-传统开发流程与容器化开发流程"}},[t._v("#")]),t._v(" 6.3.1 传统开发流程与容器化开发流程")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/zhaoyb-coder/pic-repo/main/image-20241017134533763.png",alt:"image-20241017134533763"}})]),t._v(" "),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/zhaoyb-coder/pic-repo/main/image-20241017134545484.png",alt:"image-20241017134545484"}})]),t._v(" "),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/zhaoyb-coder/pic-repo/main/image-20241017134555302.png",alt:"image-20241017134555302"}})]),t._v(" "),r("h4",{attrs:{id:"_6-3-2-一些建议"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-2-一些建议"}},[t._v("#")]),t._v(" 6.3.2 一些建议")]),t._v(" "),r("p",[t._v("首先，在开发和测试环境中，推荐使用-v 共享文件夹来存储开发人员的程序代码，避免频繁打包操作;")]),t._v(" "),r("p",[t._v("其次，利用基础 base 镜像的继承特性来调整镜像的轻微变更. 例如当需要测试程序对不同版本 JDK 的支持情况时，只需改变 base 镜像的 JDK 设置，然后其他依赖它的镜像在重新创建的过程中就可以自动完成更新;")]),t._v(" "),r("p",[t._v("最后，测试部门应当注意 Docker 以及镜像的版本，并经常对部署后的应用程序进行性能上的测试.")]),t._v(" "),r("h3",{attrs:{id:"_6-4-容器与生产环境"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-容器与生产环境"}},[t._v("#")]),t._v(" 6.4 容器与生产环境")]),t._v(" "),r("h4",{attrs:{id:"_6-4-1-为标准而努力"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-1-为标准而努力"}},[t._v("#")]),t._v(" 6.4.1 为标准而努力")]),t._v(" "),r("p",[t._v("尽管 Docker 获得广大公有云厂商的大力支持，但是目前容器技术生态中已经存在许多分支与分歧，如 rkt 项目。为了解决容器生态中的差异化问题，为了从根本上解决生产环境中运用 Docker 的风险，Google、Intel、Microsoft、IBM、Amazon、VMware、Oracle、HPE、Facebook等 IT 巨头于 2015 年 6 月共同宣布成立 OCI（Open Container Initiative）组织。OCI 组织的目标在于 . 除了保障与延续既有容器服务的生命周期外，还通过不断推出标准的创新的容器解决方案赋能开发者. OCI组织的目标在于建立通用的容器技术标准。除了保障与延续既有容器服务的生命周期外， 还通过不断推出标准的创新的容器解决方案赋能开发者.")]),t._v(" "),r("blockquote",[r("p",[t._v("注：rkt 项目最早跟随 k8s 使用的运行时的组件，并且也入选过 cncf 的沙箱项目，但是在最后的使用中还是被抛弃了，其中主要的是 croi-o 和 containerd 两个项目的接受度更高，并且社区活跃度越来越低，最终停止维护。")])]),t._v(" "),r("h4",{attrs:{id:"_6-4-2-一些参考建议"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6-4-2-一些参考建议"}},[t._v("#")]),t._v(" 6.4.2 一些参考建议")]),t._v(" "),r("ul",[r("li",[t._v("如果 Docker 出现不可控的风险，是否考虑了备选的解决方案；")]),t._v(" "),r("li",[t._v("是否需要对 Docker 容器做资源限制，以及如何限制，如 CPU、内存、网络、磁盘等；")]),t._v(" "),r("li",[t._v("目前，Docker 对容器的安全管理做得不够完善，在应用到生产环境之前可以使用第三方工具来加强容器的安全管理。如使用 apparmor(类似于 selinux)对容器的能力进行限制、使用更加严格的 iptable 规则、禁止 root 用户登录、限制普通用户权限以及做好系统日志的记录；")]),t._v(" "),r("li",[t._v("公司内部私有仓库的管理、镜像的管理问题是否解决. 目前官方提供的私有仓库管理工具功能并不十分完善，若在生产环境中使用还需要更多的工作.")])]),t._v(" "),r("h2",{attrs:{id:"_7-可继续的docker-相关学习与研究"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_7-可继续的docker-相关学习与研究"}},[t._v("#")]),t._v(" 7.可继续的Docker 相关学习与研究")]),t._v(" "),r("p",[t._v("(1)Docker 核心实现技术,包括基本架构,命名空间,控制组,联合文件系统,Linux 网络虚拟化;")]),t._v(" "),r("p",[t._v("(2)Docker 中关于网络的高级知识,包括网络的启动和配置参数、DNS 的使用配置、容器访问和端口映射的相关实现;")]),t._v(" "),r("p",[t._v("(3)Docker 三剑客-Docker Machine,Docker Compose,Docker Swarm;")]),t._v(" "),r("p",[t._v("(4)Mesos-优秀的集群资源调度平台;")]),t._v(" "),r("p",[t._v("(5)Kubernetes—生产级容器集群平台;")]),t._v(" "),r("p",[t._v("(6)源码的研读;")]),t._v(" "),r("p",[t._v(".......")]),t._v(" "),r("h2",{attrs:{id:"_8-推荐网站与书籍"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_8-推荐网站与书籍"}},[t._v("#")]),t._v(" 8. 推荐网站与书籍")]),t._v(" "),r("p",[t._v("网站：")]),t._v(" "),r("p",[t._v("docker 官网: https://www.docker.com/")]),t._v(" "),r("p",[t._v("dockerhub 官网： https://hub.docker.com/")]),t._v(" "),r("p",[t._v("docker 菜鸟课程: https://www.runoob.com/docker/docker-tutorial.html")]),t._v(" "),r("p",[t._v("Docker 官方文档：https://docs.docker.com/")]),t._v(" "),r("p",[t._v("书籍：")]),t._v(" "),r("p",[t._v("《docker 容器实战：原理、架构与应用》")]),t._v(" "),r("p",[t._v("《Docker 技术入门与实战》")]),t._v(" "),r("p",[t._v("《第一本 Docker 书》")]),t._v(" "),r("p",[t._v("《Docker 进阶与实战 华为 Docker 实践小组》")]),t._v(" "),r("p",[t._v("《Docker 源码分析》")]),t._v(" "),r("p",[t._v("......")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/zhaoyb-coder/pic-repo/main/image-20241017134838976.png",alt:"image-20241017134838976"}})])])}),[],!1,null,null,null);r.default=s.exports}}]);