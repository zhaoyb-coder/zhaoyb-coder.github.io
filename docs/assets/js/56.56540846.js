(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{370:function(a,t,r){"use strict";r.r(t);var s=r(8),n=Object(s.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"why-spring"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#why-spring"}},[a._v("#")]),a._v(" Why Spring ?")]),a._v(" "),t("h3",{attrs:{id:"现状"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#现状"}},[a._v("#")]),a._v(" 现状：")]),a._v(" "),t("p",[a._v("Spring框架在Java开发领域中的地位举足轻重，几乎成为了现代企业级应用开发的基石。对于Java程序员而言，Spring不仅是一个耳熟能详的名字，更是项目构建中不可或缺的核心支撑。尽管各类业务框架纷繁复杂，但多数项目的架构设计都选择以Spring为底层基础，进而整合MyBatis、Netty、Dubbo等各种专项技术框架。")]),a._v(" "),t("p",[a._v("然而，我们不禁要问：为何偏偏是Spring能在众多框架中脱颖而出，并且历经多年仍保持着旺盛的生命力？难道仅仅是由于它引入了控制反转（IoC）和面向切面编程（AOP）这些概念吗？我觉得不是，接下来说一下我的思考")]),a._v(" "),t("h3",{attrs:{id:"思考"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#思考"}},[a._v("#")]),a._v(" 思考：")]),a._v(" "),t("p",[a._v("Java语言的本质特性在于其万物皆对象的理念，而Spring恰到好处地把握住了这一精髓。Spring并不直接涉足具体的业务逻辑实现，它的核心聚焦于对对象生命周期的全方位管理——从对象的定义、解析、实例化、初始化直至最后的卸载。这一理念使Spring能够成为所有基于Java的对象容器的理想选择，无论上层的业务框架多么复杂多变，无论是数据访问、网络通信还是服务治理，只要这些框架由Java编写，那么就是由无数个对象堆积而成的，那么就能被Spring管理（这个定位太厉害了，直击Java核心）")]),a._v(" "),t("p",[a._v("Spring框架的具体实现，诸如IOC容器的设计、AOP机制的实现以及各种扩展接口、监听器机制等，都是围绕这一核心思想所展开的创新实践")]),a._v(" "),t("p",[a._v("代码能被一次次的优化，但思想永存，共勉~")])])}),[],!1,null,null,null);t.default=n.exports}}]);