(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{370:function(a,t,s){"use strict";s.r(t);var r=s(7),e=Object(r.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"jdk新特性-8-17"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jdk新特性-8-17"}},[a._v("#")]),a._v(" JDK新特性(8-17)")]),a._v(" "),t("h2",{attrs:{id:"jdk-8"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jdk-8"}},[a._v("#")]),a._v(" JDK 8")]),a._v(" "),t("h3",{attrs:{id:"_1、lambda表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、lambda表达式"}},[a._v("#")]),a._v(" 1、Lambda表达式")]),a._v(" "),t("blockquote",[t("p",[a._v("lambda表达式免去了使用匿名表达式的麻烦，给予了java简单但是强大的函数式编程能力")])]),a._v(" "),t("h3",{attrs:{id:"_2、并行数组-parallel"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、并行数组-parallel"}},[a._v("#")]),a._v(" 2、并行数组(parallel)")]),a._v(" "),t("blockquote",[t("p",[a._v("JDK8增加了大量的新方法对数组进行并行处理，最重要是parallerSort(),可以在多核机器上极大提高数组排序的速度")])]),a._v(" "),t("h3",{attrs:{id:"_3、接口默认方法-静态方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、接口默认方法-静态方法"}},[a._v("#")]),a._v(" 3、接口默认方法\\静态方法")]),a._v(" "),t("blockquote",[t("p",[a._v("JDK8使用默认方法来扩展接口，默认方法与抽象方法的区别在与抽象方法必须实现，但是默认方法不需要，就是接口可以有实现方法，而且不需要实现类去实现其方法，只需要在方法名前前面加个default关键字即可实现默认方法")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("interface")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Animal")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//会被其他接口继承，可修改")]),a._v("\n    defalut "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('" default animal"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//不可修改，直接通过接口调用")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("staticPrint")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Sysout")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('" static animal"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br")])]),t("hr"),a._v(" "),t("p",[t("strong",[a._v("函数式接口：")])]),a._v(" "),t("p",[a._v("只包含一个抽象方法的接口称为函数式接口")]),a._v(" "),t("p",[a._v("注解@FunctionalInterface:此注解表明该接口是一个函数式接口，如果接口符合函数式接口的定义，则此注解加不加无所谓，加了会方便编译器的检查，如果不符合函数式接口的规范，则注解会报错")])]),a._v(" "),t("h3",{attrs:{id:"_4、重复注解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、重复注解"}},[a._v("#")]),a._v(" 4、重复注解")]),a._v(" "),t("blockquote",[t("p",[a._v("1、可以进行重复注解，重复注解本身需要使用@Repeatable注解。事实上这个改动只是编译器的技巧，底层原理保持不变")]),a._v(" "),t("p",[a._v("2、JDK8扩展了注解的上下文，现在几乎可以为任何东西添加注解：局部变量、泛型类、父类、接口的实现、方法的异常也可以添加注解")])]),a._v(" "),t("h3",{attrs:{id:"_5、optional"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5、optional"}},[a._v("#")]),a._v(" 5、Optional")]),a._v(" "),t("blockquote",[t("p",[a._v("Optional实际上是一个容器，它可以保存类型T的值，或者仅仅保存null。它的引入很好的解决空指针的异常")])]),a._v(" "),t("h3",{attrs:{id:"_6、stream"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6、stream"}},[a._v("#")]),a._v(" 6、Stream")]),a._v(" "),t("blockquote",[t("p",[a._v("1、stream流不是一种数据结构，不保存数据，只是在原数据集上定义了一组操作。")]),a._v(" "),t("p",[a._v("2、这些操作是惰性的，只有在访问到流中的某个元素，才会在元素上执行一系列操作")]),a._v(" "),t("p",[a._v("3、stream流不保存数据，所以每个stream流只能使用一次")]),a._v(" "),t("p",[a._v("ps:如果数据在1万以内，for循环效率高于foreach和stream；数据达到10万级别，stream效率最高，其次是foreach，最后是for")])]),a._v(" "),t("h3",{attrs:{id:"_7、日期api"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7、日期api"}},[a._v("#")]),a._v(" 7、日期API")]),a._v(" "),t("blockquote",[t("p",[a._v("旧版的日期API存在的问题：")]),a._v(" "),t("p",[a._v("1、非线程安全-java.util.Date是非线程安全的")]),a._v(" "),t("p",[a._v("2、设计问题-在java.util和java.sql中都有日期类，java.util包中的日期包含日期和时间，而java.sql中的只包含日期")]),a._v(" "),t("p",[a._v("3、时区处理麻烦-因此java才引入了日历类java.util.Calendar和时区类java.util.TimeZone")]),a._v(" "),t("hr"),a._v(" "),t("p",[a._v("JDK8比较重要的两个API")]),a._v(" "),t("p",[a._v("1、Local：简化了日期处理，没有时区问题")]),a._v(" "),t("p",[a._v("2、Zone：通过制定的时区处理时间")])]),a._v(" "),t("h2",{attrs:{id:"jdk-9"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jdk-9"}},[a._v("#")]),a._v(" JDK 9")]),a._v(" "),t("h3",{attrs:{id:"_1、不可变集合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、不可变集合"}},[a._v("#")]),a._v(" 1、不可变集合")]),a._v(" "),t("blockquote",[t("p",[a._v("JDK9为所有集合（List\\Set\\Map）都增加了of和copyOf方法，用来创建不可变集合，即一旦创建了就无法再执行添加、删除、替换、排序等操作，否则报错java.lang.UnsupportedOperationException")])]),a._v(" "),t("h3",{attrs:{id:"_2、私有接口方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、私有接口方法"}},[a._v("#")]),a._v(" 2、私有接口方法")]),a._v(" "),t("blockquote",[t("p",[a._v("JDK9允许接口定义私有方法，私有方法可以作为通用方法放在默认方法中调用")])]),a._v(" "),t("h3",{attrs:{id:"_3、gc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、gc"}},[a._v("#")]),a._v(" 3、GC")]),a._v(" "),t("blockquote",[t("p",[a._v("JDK9把G1作为默认的垃圾收集器，替换了JDK8的默认（PS和PO）")])]),a._v(" "),t("h3",{attrs:{id:"_4、io流加强"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、io流加强"}},[a._v("#")]),a._v(" 4、IO流加强")]),a._v(" "),t("blockquote",[t("p",[a._v("java.io.InputStream 中增加了新的方法来读取和复制InputStream中的数据")]),a._v(" "),t("p",[a._v("1、readAllBytes:读取InputStream中的所有剩余字节")]),a._v(" "),t("p",[a._v("2、readNBytes:从InputStream中读取指定数量的字节到数组中")]),a._v(" "),t("p",[a._v("3、transferTo:读取InputStream中的全部字节并写入到指定的OutputStream中")])]),a._v(" "),t("h3",{attrs:{id:"_5、jshell"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5、jshell"}},[a._v("#")]),a._v(" 5、JShell")]),a._v(" "),t("blockquote",[t("p",[a._v("JDK9引入了Jshell交互工具，让java可以像脚本语言来运行，可以在控制台打开Jshell，直接输入表达式可以查询执行结果")])]),a._v(" "),t("h3",{attrs:{id:"_6、模块化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6、模块化"}},[a._v("#")]),a._v(" 6、模块化")]),a._v(" "),t("blockquote",[t("p",[a._v("模块化的好处就是开发者根据需要引用某个依赖的指定部分，而不是引入这个依赖的全部，用来减小项目体积，增快编译效率"),t("img",{attrs:{src:"https://s2.loli.net/2022/08/23/btMVAn7imTZkh1e.png",alt:"image-20220822131510999"}})]),a._v(" "),t("p",[t("img",{attrs:{src:"https://s2.loli.net/2022/08/23/Ykfzlyi4AxoQS8s.png",alt:"image-20220822131552802"}})])]),a._v(" "),t("h2",{attrs:{id:"jdk-10"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jdk-10"}},[a._v("#")]),a._v(" JDK 10")]),a._v(" "),t("h3",{attrs:{id:"_1、var关键字"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、var关键字"}},[a._v("#")]),a._v(" 1、var关键字")]),a._v(" "),t("blockquote",[t("p",[a._v("通过var关键字实现局部变量类型推断，使java语言变成弱类型语言")])]),a._v(" "),t("h3",{attrs:{id:"_2、gc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、gc"}},[a._v("#")]),a._v(" 2、GC")]),a._v(" "),t("blockquote",[t("p",[a._v("并行full gc，来优化G1的延迟")])]),a._v(" "),t("h3",{attrs:{id:"_3、安全点优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、安全点优化"}},[a._v("#")]),a._v(" 3、安全点优化")]),a._v(" "),t("blockquote",[t("p",[a._v("允许在不执行全局VM安全点的情况下执行线程回调，可以停止单个线程，而不需要停止所有线程或者不停止线程")]),a._v(" "),t("hr"),a._v(" "),t("p",[t("strong",[a._v("安全点")]),a._v("：")]),a._v(" "),t("blockquote",[t("p",[a._v("在JVM中，传统的垃圾回收算法为了枚举GC Roots,必须要经历一个STW的过程，即停止其他非垃圾回收线程的工作，直到完成垃圾回收")]),a._v(" "),t("p",[a._v("JVM的STW是通过安全点(safepoint)的机制来实现的")]),a._v(" "),t("p",[a._v("当JVM收到STW的指令后，它便会等待所有的线程都到达安全点，才允许请求STW的线程进行独占的工作")]),a._v(" "),t("p",[a._v("程序执行时并非在所有的地方都能停顿下来进行GC，只有在到达安全点才能暂停")]),a._v(" "),t("p",[a._v("安全点的初始目的并不是让其他线程停下，而是找到一个稳定的执行状态，在这个执行状态下，JVM的堆栈信息不会发生变化，这样GC可以安全的执行可达性分析")])]),a._v(" "),t("p",[t("strong",[a._v("安全区域")]),a._v("：")]),a._v(" "),t("blockquote",[t("p",[a._v("安全点机制保证了程序执行时，在不太长的时间内就会遇到可以进入GC的安全点")]),a._v(" "),t("p",[a._v("但是当线程处于sleep或者Blocked状态时，这时候线程无法响应JVM的中断请求，“走”到安全点去挂起，JVM显然也不可能等待线程重新被分配的CPU时间以响应请求")]),a._v(" "),t("p",[a._v("安全区域是值在一段代码中，引用关系不会发生变化。在这个区域中的任意地方开始GC都是安全的，可以把安全区域看作是扩展了的安全点")])]),a._v(" "),t("p",[t("strong",[a._v("在线程执行到安全区域的代码时，首先标识自己已经进入了安全区域，这样，在这段时间内JVM发生GC时，就不用管标识自己是安全区域状态的线程了")])]),a._v(" "),t("p",[t("strong",[a._v("在线程离开安全区域时，要先检查系统是否已经完成了根节点枚举（或者整个GC过程），如果完成了，那线程就继续执行，否则它就必须等待直到收到可以离开安全区域的信号为止")])])]),a._v(" "),t("h2",{attrs:{id:"jdk-11"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jdk-11"}},[a._v("#")]),a._v(" JDK 11")]),a._v(" "),t("h3",{attrs:{id:"_1、zgc"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、zgc"}},[a._v("#")]),a._v(" 1、ZGC")]),a._v(" "),t("blockquote",[t("p",[a._v("ZGC是一个并发、基于region、压缩型的垃圾收集器，只有root扫描阶段会STW，因此ZGC的停顿时间不会随着堆的增长和存活对象的增长而变化，-XX:UnlockExperimentalVMOptions -XX:+UseZGC")]),a._v(" "),t("p",[a._v("1、GC停顿时间不会超过10ms")]),a._v(" "),t("p",[a._v("2、既能处理几百兆的小堆也能处理T级的大堆")]),a._v(" "),t("p",[a._v("3、和G1相比，应用吞吐能力不会下降15%")]),a._v(" "),t("p",[a._v("4、为未来的GC功能和利用colord指针以及Load barriers奠定了基础")])]),a._v(" "),t("h3",{attrs:{id:"_2、flight-recorder-飞行记录器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、flight-recorder-飞行记录器"}},[a._v("#")]),a._v(" 2、Flight Recorder(飞行记录器)")]),a._v(" "),t("blockquote",[t("p",[a._v("基于OS、JVM、JDK的事件产生的数据收集框架")])]),a._v(" "),t("h3",{attrs:{id:"_3、stream、optional、集合api的增强"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、stream、optional、集合api的增强"}},[a._v("#")]),a._v(" 3、Stream、Optional、集合API的增强")]),a._v(" "),t("h2",{attrs:{id:"jdk-12"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jdk-12"}},[a._v("#")]),a._v(" JDK 12")]),a._v(" "),t("h3",{attrs:{id:"_1、shenandoah-gc-新增的gc算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、shenandoah-gc-新增的gc算法"}},[a._v("#")]),a._v(" 1、Shenandoah GC，新增的GC算法")]),a._v(" "),t("h3",{attrs:{id:"_2、switch-表达式语法扩展-可以有返回值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、switch-表达式语法扩展-可以有返回值"}},[a._v("#")]),a._v(" 2、switch 表达式语法扩展，可以有返回值")]),a._v(" "),t("h3",{attrs:{id:"_3、g1收集器的优化-将gc的垃圾分为强制部分和可选部分-强制部分会被回收-可选部分可能不会被回收-提高gc的效率"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、g1收集器的优化-将gc的垃圾分为强制部分和可选部分-强制部分会被回收-可选部分可能不会被回收-提高gc的效率"}},[a._v("#")]),a._v(" 3、G1收集器的优化，将GC的垃圾分为强制部分和可选部分，强制部分会被回收，可选部分可能不会被回收，提高GC的效率")]),a._v(" "),t("h2",{attrs:{id:"jdk-13"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jdk-13"}},[a._v("#")]),a._v(" JDK 13")]),a._v(" "),t("h3",{attrs:{id:"_1、socket的底层实现优化-引入了nio"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、socket的底层实现优化-引入了nio"}},[a._v("#")]),a._v(" 1、Socket的底层实现优化，引入了NIO")]),a._v(" "),t("h3",{attrs:{id:"_2、switch"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、switch"}},[a._v("#")]),a._v(" 2、switch")]),a._v(" "),t("blockquote",[t("p",[a._v("switch表达式增加yield关键字用于返回结果，作用类似于return，如果没有返回结果则使用break；")])]),a._v(" "),t("h3",{attrs:{id:"_3、zgc优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、zgc优化"}},[a._v("#")]),a._v(" 3、ZGC优化")]),a._v(" "),t("blockquote",[t("p",[a._v("ZGC优化，将标记长时间空闲的堆内存空间返还给操作系统，保证堆大小不会小于配置的最小堆内存大小，如果堆最大和最小内存大小设置一样，则不会释放内存还给操作系统；")])]),a._v(" "),t("h3",{attrs:{id:"_4、文本块"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、文本块"}},[a._v("#")]),a._v(' 4、文本块 """')]),a._v(" "),t("blockquote",[t("p",[a._v("引入了文本块，三个双引号表示文本块，文本块内部就不需要使用换行的转义字符")])]),a._v(" "),t("h2",{attrs:{id:"jdk-14"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jdk-14"}},[a._v("#")]),a._v(" JDK 14")]),a._v(" "),t("h3",{attrs:{id:"_1、instanceof"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、instanceof"}},[a._v("#")]),a._v(" 1、instanceof")]),a._v(" "),t("blockquote",[t("p",[a._v("instanceof类型匹配语法简化，可以直接给对象赋值，如if(obj instanceof String str),如果obj是字符串类型则直接赋值给了str变量；")])]),a._v(" "),t("h3",{attrs:{id:"_2、record"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、record"}},[a._v("#")]),a._v(" 2、record")]),a._v(" "),t("blockquote",[t("p",[a._v("引入record类，类似于枚举类型，可以向Lombok一样自动生成构造器、equals、getter等方法；")])]),a._v(" "),t("h3",{attrs:{id:"_3、nullpointerexception"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、nullpointerexception"}},[a._v("#")]),a._v(" 3、NullPointerException")]),a._v(" "),t("blockquote",[t("p",[a._v("NullPointerException打印优化，打印具体哪个方法抛的空指针异常，避免同一行代码多个函数调用时无法判断具体是哪个函数抛异常的困扰，方便异常排查；")])]),a._v(" "),t("h2",{attrs:{id:"jdk-15"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jdk-15"}},[a._v("#")]),a._v(" JDK 15")]),a._v(" "),t("h3",{attrs:{id:"_1、隐藏类-hidden-class"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、隐藏类-hidden-class"}},[a._v("#")]),a._v(" 1、隐藏类 hidden class")]),a._v(" "),t("h3",{attrs:{id:"_2、密封类-sealed-class"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、密封类-sealed-class"}},[a._v("#")]),a._v(" 2、密封类 sealed class")]),a._v(" "),t("blockquote",[t("p",[a._v("通过sealed关键字修饰抽象类限定只允许指定的子类才可以实现或继承抽象类，避免抽象类被滥用")])]),a._v(" "),t("h2",{attrs:{id:"jdk-16"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jdk-16"}},[a._v("#")]),a._v(" JDK 16")]),a._v(" "),t("h3",{attrs:{id:"_1、zgc性能优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、zgc性能优化"}},[a._v("#")]),a._v(" 1、ZGC性能优化")]),a._v(" "),t("h3",{attrs:{id:"_2、instanceof模式匹配"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、instanceof模式匹配"}},[a._v("#")]),a._v(" 2、instanceof模式匹配")]),a._v(" "),t("h3",{attrs:{id:"_3、record的引入"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、record的引入"}},[a._v("#")]),a._v(" 3、record的引入")]),a._v(" "),t("h2",{attrs:{id:"jdk-17"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jdk-17"}},[a._v("#")]),a._v(" JDK 17")]),a._v(" "),t("h3",{attrs:{id:"_1、正式引入密封类sealed-class-限制抽象类的实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、正式引入密封类sealed-class-限制抽象类的实现"}},[a._v("#")]),a._v(" 1、正式引入密封类sealed class，限制抽象类的实现")]),a._v(" "),t("h3",{attrs:{id:"_2、统一日志异步刷新-先将日志写入缓存-然后再异步刷新"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、统一日志异步刷新-先将日志写入缓存-然后再异步刷新"}},[a._v("#")]),a._v(" 2、统一日志异步刷新，先将日志写入缓存，然后再异步刷新")])])}),[],!1,null,null,null);t.default=e.exports}}]);